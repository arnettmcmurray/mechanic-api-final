openapi: 3.0.3
info:
  title: Mechanic Workshop API
  version: 1.0.0
servers:
  - url: https://mechanics-api.onrender.com
    description: Production
  - url: http://127.0.0.1:5000
    description: Local

tags:
  - name: Mechanics
    description: Mechanic registration, login, and management
  - name: Customers
    description: Customer CRUD and lookup
  - name: Inventory
    description: Inventory (parts) management
  - name: Service Tickets
    description: Service ticket creation, updates, and assignments
  - name: System
    description: Global health check and misc routes

paths:
  /ping:
    get:
      tags: [System]
      summary: API heartbeat check
      responses:
        "200":
          description: Pong response
          content:
            application/json:
              example: { "status": "ok", "env": "development" }

  # === MECHANICS ===
  /mechanics/create:
    post:
      tags: [Mechanics]
      summary: Register a new mechanic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password, specialty]
              properties:
                name: { type: string, example: "Alex" }
                email: { type: string, example: "alex@shop.com" }
                password: { type: string, example: "password123" }
                specialty: { type: string, example: "Brakes" }
      responses:
        "201":
          description: Mechanic created successfully
          content:
            application/json:
              example: { "message": "Mechanic created successfully" }

  /mechanics/login:
    post:
      tags: [Mechanics]
      summary: Login and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, example: "admin@shop.com" }
                password: { type: string, example: "admin123" }
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              example:
                message: "Login successful"
                token: "eyJhbGciOiJIUzI1NiIs..."
        "401":
          description: Invalid credentials

  /mechanics/get_all:
    post:
      tags: [Mechanics]
      security:
        - bearerAuth: []
      summary: Retrieve all mechanics
      responses:
        "200":
          description: List of all mechanics
          content:
            application/json:
              example:
                - id: 1
                  name: "Admin"
                  email: "admin@shop.com"
                  specialty: "Manager"

  /mechanics/get_one:
    post:
      tags: [Mechanics]
      security:
        - bearerAuth: []
      summary: Retrieve a mechanic by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id: { type: integer, example: 1 }
      responses:
        "200":
          description: Mechanic record
          content:
            application/json:
              example:
                id: 1
                name: "Admin"
                email: "admin@shop.com"
                specialty: "Manager"

  /mechanics/update:
    put:
      tags: [Mechanics]
      security:
        - bearerAuth: []
      summary: Update mechanic info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id: { type: integer, example: 1 }
                specialty: { type: string, example: "Diagnostics" }
      responses:
        "200":
          description: Mechanic updated
          content:
            application/json:
              example: { "message": "Mechanic updated" }

  /mechanics/delete:
    delete:
      tags: [Mechanics]
      security:
        - bearerAuth: []
      summary: Delete mechanic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id: { type: integer, example: 2 }
      responses:
        "200":
          description: Mechanic deleted
          content:
            application/json:
              example: { "message": "Mechanic 2 deleted" }

  /mechanics/my_tickets:
    post:
      tags: [Mechanics]
      security:
        - bearerAuth: []
      summary: Get tickets assigned to logged-in mechanic
      responses:
        "200":
          description: List of assigned tickets
          content:
            application/json:
              example:
                - id: 1
                  description: "Brake pad replacement"
                  status: "Open"
                  customer_id: 1

  /mechanics/top:
    post:
      tags: [Mechanics]
      security:
        - bearerAuth: []
      summary: Get top mechanic by ticket count
      responses:
        "200":
          description: Top performing mechanic
          content:
            application/json:
              example:
                id: 2
                name: "Alex"
                ticket_count: 8

  # === CUSTOMERS ===
  /customers/create:
    post:
      tags: [Customers]
      security:
        - bearerAuth: []
      summary: Create a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email]
              properties:
                name: { type: string, example: "John Doe" }
                email: { type: string, example: "john@example.com" }
                phone: { type: string, example: "312-555-1234" }
                car: { type: string, example: "Honda Civic" }
      responses:
        "201":
          description: Customer created
          content:
            application/json:
              example: { "id": 1, "name": "John Doe" }

  /customers/get_all:
    post:
      tags: [Customers]
      security:
        - bearerAuth: []
      summary: Get all customers
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              example: {}
      responses:
        "200":
          description: All customers
          content:
            application/json:
              example:
                - id: 1
                  name: "John Doe"
                  email: "john@example.com"

  /customers/get_one:
    post:
      tags: [Customers]
      security:
        - bearerAuth: []
      summary: Get one customer by email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email: { type: string, example: "john@example.com" }
      responses:
        "200":
          description: Customer details
          content:
            application/json:
              example:
                id: 1
                name: "John Doe"
                email: "john@example.com"
                phone: "312-555-1111"

  /customers/update:
    put:
      tags: [Customers]
      security:
        - bearerAuth: []
      summary: Update a customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id: { type: integer, example: 1 }
                phone: { type: string, example: "312-555-5678" }
      responses:
        "200":
          description: Updated customer record
          content:
            application/json:
              example: { "id": 1, "name": "John Doe", "phone": "312-555-5678" }

  /customers/delete:
    delete:
      tags: [Customers]
      security:
        - bearerAuth: []
      summary: Delete a customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id: { type: integer, example: 2 }
      responses:
        "200":
          description: Customer deleted
          content:
            application/json:
              example: { "message": "Customer 2 deleted" }

  # === INVENTORY ===
  /inventory/create:
    post:
      tags: [Inventory]
      security:
        - bearerAuth: []
      summary: Add a new part to inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, price, quantity]
              properties:
                name: { type: string, example: "Rotor" }
                price: { type: number, example: 120.0 }
                quantity: { type: integer, example: 5 }
      responses:
        "201":
          description: Part added
          content:
            application/json:
              example: { "id": 3, "name": "Rotor", "price": 120.0 }

  /inventory/get_all:
    post:
      tags: [Inventory]
      summary: Retrieve all inventory parts
      responses:
        "200":
          description: All parts
          content:
            application/json:
              example:
                - id: 1
                  name: "Brake Pads"
                  price: 49.99
                  quantity: 20

  /inventory/get_one:
    post:
      tags: [Inventory]
      summary: Retrieve one inventory part by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id: { type: integer, example: 1 }
      responses:
        "200":
          description: Part details
          content:
            application/json:
              example:
                id: 1
                name: "Brake Pads"
                price: 49.99
                quantity: 20

  /inventory/update:
    put:
      tags: [Inventory]
      security:
        - bearerAuth: []
      summary: Update inventory part info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id: { type: integer, example: 1 }
                quantity: { type: integer, example: 15 }
      responses:
        "200":
          description: Updated part
          content:
            application/json:
              example: { "id": 1, "quantity": 15 }

  /inventory/delete:
    delete:
      tags: [Inventory]
      security:
        - bearerAuth: []
      summary: Delete a part from inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id: { type: integer, example: 1 }
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              example: { "message": "Part 1 deleted" }

  # === SERVICE TICKETS ===
  /service_tickets/create:
    post:
      tags: [Service Tickets]
      security:
        - bearerAuth: []
      summary: Create a new service ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [description, customer_id]
              properties:
                description: { type: string, example: "Brake inspection" }
                customer_id: { type: integer, example: 1 }
      responses:
        "201":
          description: Ticket created
          content:
            application/json:
              example:
                id: 3
                description: "Brake inspection"
                status: "Open"

  /service_tickets/get_all:
    post:
      tags: [Service Tickets]
      security:
        - bearerAuth: []
      summary: Get all service tickets
      responses:
        "200":
          description: All tickets
          content:
            application/json:
              example:
                - id: 1
                  description: "Brake pad replacement"
                  status: "Open"
                  customer_id: 1

  /service_tickets/get_one:
    post:
      tags: [Service Tickets]
      security:
        - bearerAuth: []
      summary: Get single ticket by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ticket_id]
              properties:
                ticket_id: { type: integer, example: 1 }
      responses:
        "200":
          description: Ticket details
          content:
            application/json:
              example:
                id: 1
                description: "Oil change"
                status: "Closed"

  /service_tickets/update:
    put:
      tags: [Service Tickets]
      security:
        - bearerAuth: []
      summary: Update a service ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ticket_id]
              properties:
                ticket_id: { type: integer, example: 1 }
                status: { type: string, example: "Closed" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              example: { "ticket_id": 1, "status": "Closed" }

  /service_tickets/delete:
    delete:
      tags: [Service Tickets]
      security:
        - bearerAuth: []
      summary: Delete a service ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ticket_id]
              properties:
                ticket_id: { type: integer, example: 1 }
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              example: { "message": "Ticket 1 deleted" }

  /service_tickets/assign:
    post:
      tags: [Service Tickets]
      security:
        - bearerAuth: []
      summary: Assign mechanic to ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ticket_id, mech_id]
              properties:
                ticket_id: { type: integer, example: 1 }
                mech_id: { type: integer, example: 1 }
      responses:
        "200":
          description: Mechanic assigned
          content:
            application/json:
              example:
                message: "Mechanic assigned"

  /service_tickets/add_parts:
    post:
      tags: [Service Tickets]
      security:
        - bearerAuth: []
      summary: Add part(s) to ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ticket_id, parts]
              properties:
                ticket_id: { type: integer, example: 1 }
                parts:
                  type: array
                  items:
                    type: object
                    properties:
                      part_id: { type: integer, example: 1 }
      responses:
        "201":
          description: Parts added
          content:
            application/json:
              example:
                message: "Ticket 1 updated"
                parts: ["Brake Pads"]

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
