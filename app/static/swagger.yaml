openapi: 3.0.1
info:
  title: Mechanic Workshop API
  version: 1.0.0
  description: Flask backend for managing mechanics, customers, inventory, and service tickets

servers:
  - url: https://mechanics-api.onrender.com
    description: Production server
  - url: http://127.0.0.1:5000
    description: Local server

schemes:
  - https
  - http

tags:
  - name: Root
    description: API status check
  - name: Mechanics
    description: Manage mechanics and assignments
  - name: Customers
    description: Manage customer data
  - name: Inventory
    description: Manage parts and stock
  - name: Service Tickets
    description: Manage service tickets and part assignments
  - name: Negative Tests
    description: Common invalid request checks

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Mechanic:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "Alex Rivera" }
        email: { type: string, example: "alex@shop.com" }
        specialty: { type: string, example: "Brakes" }

    Customer:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "John Doe" }
        email: { type: string, example: "john@example.com" }
        phone: { type: string, example: "312-555-1111" }
        car: { type: string, example: "Honda Civic" }

    Inventory:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "Brake Pads" }
        price: { type: number, format: float, example: 49.99 }
        quantity: { type: integer, example: 20 }

    ServiceTicket:
      type: object
      properties:
        id: { type: integer, example: 1 }
        description: { type: string, example: "Brake pad replacement" }
        status: { type: string, example: "Open" }
        customer_id: { type: integer, example: 1 }
        date: { type: string, example: "2025-10-22T08:00:00Z" }

security:
  - bearerAuth: []

paths:
  /:
    get:
      tags: [Root]
      summary: Root endpoint
      description: Confirms the API is live
      responses:
        "200":
          description: API status and example credentials

  # === MECHANICS ===
  /mechanics/create:
    post:
      tags: [Mechanics]
      summary: Register a new mechanic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name: { type: string, example: "Alex Rivera" }
                email: { type: string, example: "alex@shop.com" }
                password: { type: string, example: "password123" }
                specialty: { type: string, example: "Brakes" }
      responses:
        "201":
          description: Mechanic created successfully

  /mechanics/login:
    post:
      tags: [Mechanics]
      summary: Login to obtain JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, example: "alex@shop.com" }
                password: { type: string, example: "password123" }
      responses:
        "200":
          description: Login successful with JWT token

  /mechanics/get_all:
    post:
      tags: [Mechanics]
      summary: Get all mechanics
      security: [{ bearerAuth: [] }]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              example: {}
      responses:
        "200":
          description: List of all mechanics

  /mechanics/get_one:
    post:
      tags: [Mechanics]
      summary: Get a mechanic by ID
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id: { type: integer, example: 1 }
      responses:
        "200":
          description: Mechanic details

  /mechanics/update:
    put:
      tags: [Mechanics]
      summary: Update mechanic info
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id: { type: integer, example: 1 }
                specialty: { type: string, example: "Suspension" }
                password: { type: string, example: "newpassword123" }
      responses:
        "200":
          description: Mechanic updated

  /mechanics/delete:
    delete:
      tags: [Mechanics]
      summary: Delete mechanic
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id: { type: integer, example: 2 }
      responses:
        "200":
          description: Mechanic deleted

  /mechanics/my_tickets:
    post:
      tags: [Mechanics]
      summary: Get tickets assigned to logged-in mechanic
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Mechanic tickets listed

  /mechanics/top:
    post:
      tags: [Mechanics]
      summary: Get top mechanic by ticket count
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Top mechanic details

  # === CUSTOMERS ===
  /customers/create:
    post:
      tags: [Customers]
      summary: Create a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, phone, car]
              properties:
                name: { type: string, example: "John Doe" }
                email: { type: string, example: "john@example.com" }
                phone: { type: string, example: "312-555-1111" }
                car: { type: string, example: "Honda Civic" }
      responses:
        "201":
          description: Customer created successfully

  /customers/get_all:
    post:
      tags: [Customers]
      summary: Get all customers
      security: [{ bearerAuth: [] }]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              example: {}
      responses:
        "200":
          description: List of all customers

  /customers/get_one:
    post:
      tags: [Customers]
      summary: Get one customer by email
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email: { type: string, example: "john@example.com" }
      responses:
        "200":
          description: Customer details

  /customers/update:
    put:
      tags: [Customers]
      summary: Update customer info
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id: { type: integer, example: 1 }
                phone: { type: string, example: "312-555-9999" }
                car: { type: string, example: "Honda Accord" }
      responses:
        "200":
          description: Customer updated

  /customers/delete:
    delete:
      tags: [Customers]
      summary: Delete customer by ID
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id: { type: integer, example: 2 }
      responses:
        "200":
          description: Customer deleted

  # === INVENTORY ===
  /inventory/create:
    post:
      tags: [Inventory]
      summary: Add a new part to inventory
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, price, quantity]
              properties:
                name: { type: string, example: "Brake Pads" }
                price: { type: number, example: 49.99 }
                quantity: { type: integer, example: 20 }
      responses:
        "201":
          description: Part created

  /inventory/get_all:
    post:
      tags: [Inventory]
      summary: Get all parts
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              example: {}
      responses:
        "200":
          description: List of parts

  /inventory/get_one:
    post:
      tags: [Inventory]
      summary: Get one part by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id: { type: integer, example: 1 }
      responses:
        "200":
          description: Part details

  /inventory/update:
    put:
      tags: [Inventory]
      summary: Update inventory part
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id: { type: integer, example: 1 }
                quantity: { type: integer, example: 25 }
      responses:
        "200":
          description: Part updated

  /inventory/delete:
    delete:
      tags: [Inventory]
      summary: Delete part from inventory
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id: { type: integer, example: 3 }
      responses:
        "200":
          description: Part deleted

  # === SERVICE TICKETS ===
  /service_tickets/create:
    post:
      tags: [Service Tickets]
      summary: Create a new service ticket
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [description, status, customer_id]
              properties:
                description: { type: string, example: "Oil change" }
                status: { type: string, example: "Open" }
                customer_id: { type: integer, example: 1 }
      responses:
        "201":
          description: Ticket created

  /service_tickets/get_all:
    post:
      tags: [Service Tickets]
      summary: Get all tickets
      security: [{ bearerAuth: [] }]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              example: {}
      responses:
        "200":
          description: List of tickets

  /service_tickets/get_one:
    post:
      tags: [Service Tickets]
      summary: Get a ticket by ID
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ticket_id]
              properties:
                ticket_id: { type: integer, example: 1 }
      responses:
        "200":
          description: Ticket details

  /service_tickets/update:
    put:
      tags: [Service Tickets]
      summary: Update a service ticket
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ticket_id]
              properties:
                ticket_id: { type: integer, example: 1 }
                status: { type: string, example: "Closed" }
      responses:
        "200":
          description: Ticket updated

  /service_tickets/delete:
    delete:
      tags: [Service Tickets]
      summary: Delete service ticket
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ticket_id]
              properties:
                ticket_id: { type: integer, example: 2 }
      responses:
        "200":
          description: Ticket deleted

  /service_tickets/assign:
    post:
      tags: [Service Tickets]
      summary: Assign mechanic to ticket
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ticket_id, mech_id]
              properties:
                ticket_id: { type: integer, example: 1 }
                mech_id: { type: integer, example: 2 }
      responses:
        "200":
          description: Mechanic assigned

  /service_tickets/remove:
    post:
      tags: [Service Tickets]
      summary: Remove mechanic from ticket
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ticket_id, mech_id]
              properties:
                ticket_id: { type: integer, example: 1 }
                mech_id: { type: integer, example: 2 }
      responses:
        "200":
          description: Mechanic removed

  /service_tickets/add_parts:
    post:
      tags: [Service Tickets]
      summary: Add parts to ticket
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ticket_id, parts]
              properties:
                ticket_id: { type: integer, example: 1 }
                parts:
                  type: array
                  items:
                    type: object
                    required: [part_id]
                    properties:
                      part_id: { type: integer, example: 1 }
      responses:
        "201":
          description: Parts added to ticket

  # === NEGATIVE TESTS ===
  /negative/missing_token:
    post:
      tags: [Negative Tests]
      summary: Attempt protected route without JWT
      responses:
        "401":
          description: Unauthorized request

  /negative/invalid_input:
    post:
      tags: [Negative Tests]
      summary: Send bad data to trigger validation error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nonsense: { type: string, example: "garbage" }
      responses:
        "400":
          description: Validation error triggered
